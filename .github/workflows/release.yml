name: Release

on:
  push:
    tags:
      - 'prompter-v*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Validate version consistency
        run: |
          TAG_VERSION=$(echo "${{ steps.version.outputs.version }}" | sed 's/prompter-v//')
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "üè∑Ô∏è  Tag version: $TAG_VERSION"
          echo "üì¶ Cargo version: $CARGO_VERSION"
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "‚ùå ERROR: Tag version ($TAG_VERSION) doesn't match Cargo.toml version ($CARGO_VERSION)"
            echo "This indicates the tag was created before the version was bumped in Cargo.toml"
            echo "Please use 'versioneer' to manage versions and create tags atomically"
            exit 1
          fi
          echo "‚úÖ Version consistency validated"
      - name: Create Release
        run: |
          gh release create ${{ steps.version.outputs.version }} \
            --title "prompter ${{ steps.version.outputs.version }}" \
            --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: prompter
          target: ${{ matrix.target }}
          tar: none
          tar-xz: none
          zip: all
          checksum: sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Verify binary version
        run: |
          EXPECTED_VERSION=$(echo "${{ needs.create-release.outputs.version }}" | sed 's/prompter-v//')
          # Find and test the built binary
          if [ -f "target/release/prompter" ]; then
            BINARY_VERSION=$(./target/release/prompter version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
          elif [ -f "target/release/prompter.exe" ]; then
            BINARY_VERSION=$(./target/release/prompter.exe version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
          else
            echo "‚ùå ERROR: Could not find built binary for verification"
            exit 1
          fi
          echo "üè∑Ô∏è  Expected version: $EXPECTED_VERSION"
          echo "üîß Binary version: $BINARY_VERSION"
          if [ "$EXPECTED_VERSION" != "$BINARY_VERSION" ]; then
            echo "‚ùå ERROR: Built binary version ($BINARY_VERSION) doesn't match expected version ($EXPECTED_VERSION)"
            echo "This indicates a version synchronization problem in the build process"
            exit 1
          fi
          echo "‚úÖ Binary version verified"

